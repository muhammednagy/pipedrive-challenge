name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  IMAGE: pipedrive

jobs:
  tests:
    runs-on: ubuntu-latest
    name: Tests
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: test_pipedrive
          MYSQL_ROOT_PASSWORD: "pipedrive"
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Build
        run: go build -v ./...

      - name: Test
        env:
          DATABASE_PORT:  ${{ job.services.mysql.ports[3306] }}
          DATABASE_USERNAME:  "root"
        run: go test -race -v -p 1 ./...

  errcheck:
    name: Errcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Errcheck
        uses: grandcolline/golang-github-actions@v1.1.0
        with:
          run: errcheck

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: check
        uses: golangci/golangci-lint-action@v2.3.0
        with:
          version: v1.35

  shadow:
    name: Shadow
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: check
        uses: grandcolline/golang-github-actions@v1.1.0
        with:
          run: shadow

  staticcheck:
    name: StaticCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: check
        uses: grandcolline/golang-github-actions@v1.1.0
        with:
          run: staticcheck

  sec:
    name: Sec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: check
        uses: grandcolline/golang-github-actions@v1.1.0
        with:
          run: sec

  setup-gcloud-build-publish:
    name: Setup gcloud, Build and Publish
    runs-on: ubuntu-latest
    needs: [Tests, Errcheck, Lint, Shadow, StaticCheck, Sec]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:latest" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE"